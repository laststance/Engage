appId: com.anonymous.engage
tags: [ios]
---
# Preset Task Management E2E Test
# Tests CRUD operations for preset tasks, category management, and integration with task selection

- launchApp
- clearState

# Wait for app to initialize and load default presets
- waitForAnimationToEnd

# Navigate to Calendar tab (should be default)
- assertVisible:
    id: 'calendar-screen'

# Open a day by tapping on a date
- tapOn:
    point: 50%, 50% # Tap on middle of calendar (approximate date)
- waitForAnimationToEnd

# Verify Day Sheet is visible
- assertVisible: 'Daily Tasks'

# Test 1: Open Task Picker
- tapOn: 'タスクを選択'
- waitForAnimationToEnd

# Verify Task Picker is visible with default preset tasks
- assertVisible: 'タスクを選択'
- assertVisible: 'プリセットを編集'

# Verify default categories and tasks are present
- assertVisible: '事業'
- assertVisible: '生活'
- assertVisible: 'ネットワーキング'
- assertVisible: '運動 (20分以上)'

# Test 2: Open Preset Task Editor
- tapOn: 'プリセットを編集'
- waitForAnimationToEnd

# Verify Preset Task Editor is visible
- assertVisible: 'プリセットタスク編集'
- assertVisible: '新しいタスクを追加'

# Verify existing tasks are editable
- assertVisible: 'ネットワーキング'
- assertVisible: '運動 (20分以上)'

# Test 3: Add a new task
- tapOn: '新しいタスクを追加'
- waitForAnimationToEnd

# Find the new task input field (should be at the bottom)
- scroll
- waitForAnimationToEnd

# Input task title for the new task
- tapOn:
    text: 'タスク名を入力'
- inputText: '新しいタスク'

# Set duration for the new task
- tapOn:
    text: '例: 30'
- inputText: '15'

# Test 4: Create a new category
- tapOn: 'カテゴリー追加'
- waitForAnimationToEnd

# Input new category name
- tapOn:
    text: '新しいカテゴリー名'
- inputText: '勉強'

# Create the category
- tapOn: '作成'
- waitForAnimationToEnd

# Verify new category is available
- assertVisible: '勉強'

# Test 5: Assign new task to new category
- swipe:
    direction: UP
- waitForAnimationToEnd

# Find the new task and change its category to "勉強"
# This is a simplified approach - in reality we'd need more specific selectors
- tapOn:
    text: '勉強' # Select the new category for the new task

# Test 6: Save preset changes
- tapOn: '保存'
- waitForAnimationToEnd

# Should return to Task Picker
- assertVisible: 'タスクを選択'

# Verify new task and category are available in Task Picker
- assertVisible: '勉強'
- assertVisible: '新しいタスク'

# Test 7: Select tasks including the new one
- tapOn: 'ネットワーキング'
- tapOn: '新しいタスク'
- waitForAnimationToEnd

# Confirm task selection
- tapOn:
    text: '確定'
- waitForAnimationToEnd

# Should return to Day Sheet
- assertVisible: 'Daily Tasks'

# Verify selected tasks are now available in Day Sheet
- assertVisible: 'ネットワーキング'
- assertVisible: '新しいタスク'

# Test 8: Complete a task to verify functionality
- tapOn: 'ネットワーキング'
- waitForAnimationToEnd

# Task should show as completed (this would be visual feedback)
# We can't easily test visual state changes in Maestro, but we can verify the tap worked

# Test 9: Test preset task editing workflow
- tapOn: 'タスクを選択'
- waitForAnimationToEnd

- tapOn: 'プリセットを編集'
- waitForAnimationToEnd

# Test editing an existing task
- tapOn:
    text: '新しいタスク'
- eraseText
- inputText: '編集されたタスク'

# Test deleting a task
- scroll
- waitForAnimationToEnd

# Find and tap delete button for a task (this is simplified)
- tapOn: '削除'
- waitForAnimationToEnd

# Confirm deletion in alert
- tapOn: '削除'
- waitForAnimationToEnd

# Save changes
- tapOn: '保存'
- waitForAnimationToEnd

# Verify changes are reflected in Task Picker
- assertVisible: '編集されたタスク'

# Test 10: Cancel preset editing to verify no unwanted changes
- tapOn: 'プリセットを編集'
- waitForAnimationToEnd

# Make a change
- tapOn: '新しいタスクを追加'
- tapOn:
    text: 'タスク名を入力'
- inputText: 'キャンセルされるタスク'

# Cancel without saving
- tapOn: 'キャンセル'
- waitForAnimationToEnd

# Confirm cancellation in alert
- tapOn: '破棄'
- waitForAnimationToEnd

# Verify the cancelled task is not present
- assertNotVisible: 'キャンセルされるタスク'

# Test 11: Verify default task suggestions work
- tapOn:
    id: 'task-picker-close'
- waitForAnimationToEnd

# Close Day Modal
- tapOn:
    id: 'day-modal-close'
- waitForAnimationToEnd

# Navigate to a different date to test fresh task selection
- tapOn:
    point: 30%, 60% # Different date
- waitForAnimationToEnd

- tapOn: 'タスクを選択'
- waitForAnimationToEnd

# Verify suggested tasks are available (default presets should be there)
- assertVisible: '運動 (20分以上)'
- assertVisible: '読書・勉強'

# Test 12: Verify category management
- tapOn: 'プリセットを編集'
- waitForAnimationToEnd

# Verify custom category is still available
- assertVisible: '勉強'

# Test category color assignment (visual verification)
# Different categories should have different colored indicators

# Close preset editor
- tapOn: 'キャンセル'
- waitForAnimationToEnd

# Don't save changes
- tapOn: '破棄'
- waitForAnimationToEnd

# Close task picker
- tapOn:
    id: 'task-picker-close'
- waitForAnimationToEnd

# Close day modal
- tapOn:
    id: 'day-modal-close'
- waitForAnimationToEnd

# Test 13: Verify persistence across app sessions
# This would require app restart, which is complex in Maestro
# For now, we'll verify that data persists within the session

# Navigate to Stats tab to verify task completion data
- tapOn:
    point: 83%, 93% # Stats tab
    repeat: 2
- waitForAnimationToEnd

# Verify stats screen shows data
- assertVisible: 'Stats'

# Navigate back to Calendar
- tapOn:
    point: 17%, 93% # Calendar tab
    repeat: 2
- waitForAnimationToEnd

# Open the same date again
- tapOn:
    point: 50%, 50%
- waitForAnimationToEnd

# Verify task completion state is maintained
- assertVisible: 'Daily Tasks'

# The completed task should still show as completed
# (Visual verification would be needed here)

# Final verification: Ensure all core preset management features work
- tapOn: 'タスクを選択'
- waitForAnimationToEnd

# Verify all expected elements are present
- assertVisible: '事業'
- assertVisible: '生活'
- assertVisible: '勉強' # Custom category
- assertVisible: '編集されたタスク' # Modified task
- assertVisible: 'プリセットを編集'

# Close everything
- tapOn:
    id: 'task-picker-close'
- waitForAnimationToEnd

- tapOn:
    id: 'day-modal-close'
- waitForAnimationToEnd

# Test completed successfully
- assertVisible:
    id: 'calendar-screen'
