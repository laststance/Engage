name: Release & Deployment

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version type to bump (patch/minor/major)'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
      platform:
        description: 'Platform to build and deploy'
        required: true
        type: choice
        options:
          - both
          - ios
          - android
      skip_submit:
        description: 'Skip app store submission (build only)'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write

jobs:
  validate:
    name: Pre-release Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '22.20.0'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Run all CI checks
        run: |
          echo "Running lint..."
          pnpm lint

          echo "Running type check..."
          pnpm typecheck

          echo "Running tests..."
          pnpm test

      - name: Deployment check
        run: pnpm deploy:check

  version-bump:
    name: Version Bump
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '22.20.0'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump version
        id: version
        run: |
          # Use deployment script for version bump
          pnpm deploy:version -- ${{ inputs.version }}

          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Commit version changes
        run: |
          git add package.json pnpm-lock.yaml app.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
          git push

  build-ios:
    name: Build iOS
    runs-on: ubuntu-latest
    needs: version-bump
    if: inputs.platform == 'ios' || inputs.platform == 'both'
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: main

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '22.20.0'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Setup Expo and EAS
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Build iOS with EAS
        run: pnpm deploy:build:ios
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: version-bump
    if: inputs.platform == 'android' || inputs.platform == 'both'
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: main

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '22.20.0'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Setup Expo and EAS
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Build Android with EAS
        run: pnpm deploy:build:android
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

  submit-ios:
    name: Submit to App Store
    runs-on: ubuntu-latest
    needs: [version-bump, build-ios]
    if: |
      !inputs.skip_submit &&
      (inputs.platform == 'ios' || inputs.platform == 'both')
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: main

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '22.20.0'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Setup Expo and EAS
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Submit to App Store
        run: pnpm deploy:submit:ios
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          EXPO_APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.EXPO_APPLE_APP_SPECIFIC_PASSWORD }}

  submit-android:
    name: Submit to Google Play
    runs-on: ubuntu-latest
    needs: [version-bump, build-android]
    if: |
      !inputs.skip_submit &&
      (inputs.platform == 'android' || inputs.platform == 'both')
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: main

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '22.20.0'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Setup Expo and EAS
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Submit to Google Play
        run: pnpm deploy:submit:android
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [version-bump, build-ios, build-android]
    if: always() && needs.version-bump.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: main
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi

          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.version-bump.outputs.new_version }}
          release_name: Release v${{ needs.version-bump.outputs.new_version }}
          body: |
            ## Changes

            ${{ env.CHANGELOG }}

            ## Build Details

            - Platform: ${{ inputs.platform }}
            - iOS Build: ${{ needs.build-ios.result || 'skipped' }}
            - Android Build: ${{ needs.build-android.result || 'skipped' }}
            - Submitted to stores: ${{ !inputs.skip_submit }}
          draft: false
          prerelease: false

  notify:
    name: Notify Release Status
    runs-on: ubuntu-latest
    needs: [submit-ios, submit-android, create-release]
    if: always()

    steps:
      - name: Summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Version: ${{ needs.version-bump.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Platform: ${{ inputs.platform }}" >> $GITHUB_STEP_SUMMARY
          echo "- iOS Build: ${{ needs.build-ios.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Android Build: ${{ needs.build-android.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- iOS Submit: ${{ needs.submit-ios.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Android Submit: ${{ needs.submit-android.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub Release: ${{ needs.create-release.result }}" >> $GITHUB_STEP_SUMMARY
