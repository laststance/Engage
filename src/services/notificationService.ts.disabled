import * as Notifications from 'expo-notifications'
import * as Device from 'expo-device'
import { Platform } from 'react-native'

// Set the notification handler to control how notifications are displayed when the app is running
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowBanner: true,
    shouldShowList: true,
    shouldPlaySound: true,
    shouldSetBadge: false,
  }),
})

export class NotificationService {
  private static instance: NotificationService
  private isInitialized = false

  static getInstance(): NotificationService {
    if (!NotificationService.instance) {
      NotificationService.instance = new NotificationService()
    }
    return NotificationService.instance
  }

  /**
   * Initialize notification service and request permissions
   */
  async initialize(): Promise<boolean> {
    if (this.isInitialized) {
      return true
    }

    try {
      // Only request permissions on physical devices
      if (!Device.isDevice) {
        console.warn('Push notifications only work on physical devices')
        return false
      }

      // Create notification channel for Android
      if (Platform.OS === 'android') {
        await this.createNotificationChannel()
      }

      // Request permissions
      const hasPermission = await this.requestPermissions()

      if (hasPermission) {
        this.isInitialized = true
        console.log('Notification service initialized successfully')
      }

      return hasPermission
    } catch (error) {
      console.error('Failed to initialize notification service:', error)
      return false
    }
  }

  /**
   * Request notification permissions from the user
   */
  async requestPermissions(): Promise<boolean> {
    try {
      const { status: existingStatus } =
        await Notifications.getPermissionsAsync()
      let finalStatus = existingStatus

      // If permission not granted, request it
      if (existingStatus !== 'granted') {
        const { status } = await Notifications.requestPermissionsAsync({
          ios: {
            allowAlert: true,
            allowBadge: true,
            allowSound: true,
            allowDisplayInCarPlay: false,
            allowCriticalAlerts: false,
          },
        })
        finalStatus = status
      }

      if (finalStatus !== 'granted') {
        console.warn('Notification permission not granted')
        return false
      }

      return true
    } catch (error) {
      console.error('Error requesting notification permissions:', error)
      return false
    }
  }

  /**
   * Create notification channel for Android
   */
  private async createNotificationChannel(): Promise<void> {
    await Notifications.setNotificationChannelAsync('daily-reminders', {
      name: 'Daily Reminders',
      importance: Notifications.AndroidImportance.HIGH,
      vibrationPattern: [0, 250, 250, 250],
      lightColor: '#007AFF',
      sound: 'default',
      description: 'Daily reminders to check your habits and tasks',
    })
  }

  /**
   * Schedule daily reminder notification
   */
  async scheduleDailyReminder(
    hour: number = 9,
    minute: number = 0
  ): Promise<string | null> {
    try {
      if (!this.isInitialized) {
        const initialized = await this.initialize()
        if (!initialized) {
          return null
        }
      }

      // Cancel any existing daily reminder
      await this.cancelDailyReminder()

      // Schedule new daily reminder
      const identifier = await Notifications.scheduleNotificationAsync({
        identifier: 'daily-reminder',
        content: {
          title: '‰ªäÊó•„ÅÆÁøíÊÖ£„Çí„ÉÅ„Çß„ÉÉ„ÇØ„Åó„Åæ„Åó„Çá„ÅÜ üìù',
          body: '„Ç´„É¨„É≥„ÉÄ„Éº„ÇíÈñã„ÅÑ„Å¶„ÄÅ‰ªäÊó•„ÅÆ„Çø„Çπ„ÇØ„ÇíÈÅ∏„Çì„Åß„Åø„Åæ„Åõ„Çì„ÅãÔºü',
          data: {
            type: 'daily_reminder',
            url: '/today', // Deep link to today's view
          },
          sound: 'default',
        },
        trigger: {
          type: Notifications.SchedulableTriggerInputTypes.DAILY,
          hour,
          minute,
          channelId: Platform.OS === 'android' ? 'daily-reminders' : undefined,
        },
      })

      console.log(
        `Daily reminder scheduled for ${hour}:${minute
          .toString()
          .padStart(2, '0')}`
      )
      return identifier
    } catch (error) {
      console.error('Failed to schedule daily reminder:', error)
      return null
    }
  }

  /**
   * Cancel daily reminder notification
   */
  async cancelDailyReminder(): Promise<void> {
    try {
      await Notifications.cancelScheduledNotificationAsync('daily-reminder')
      console.log('Daily reminder cancelled')
    } catch (error) {
      console.error('Failed to cancel daily reminder:', error)
    }
  }

  /**
   * Cancel all scheduled notifications
   */
  async cancelAllNotifications(): Promise<void> {
    try {
      await Notifications.cancelAllScheduledNotificationsAsync()
      console.log('All notifications cancelled')
    } catch (error) {
      console.error('Failed to cancel all notifications:', error)
    }
  }

  /**
   * Get all scheduled notifications
   */
  async getScheduledNotifications(): Promise<
    Notifications.NotificationRequest[]
  > {
    try {
      const scheduled = await Notifications.getAllScheduledNotificationsAsync()
      return scheduled
    } catch (error) {
      console.error('Failed to get scheduled notifications:', error)
      return []
    }
  }

  /**
   * Check if notifications are enabled
   */
  async areNotificationsEnabled(): Promise<boolean> {
    try {
      const { status } = await Notifications.getPermissionsAsync()
      return status === 'granted'
    } catch (error) {
      console.error('Failed to check notification status:', error)
      return false
    }
  }

  /**
   * Get notification settings for display in UI
   */
  async getNotificationSettings(): Promise<{
    enabled: boolean
    dailyReminderTime: { hour: number; minute: number } | null
    scheduledCount: number
  }> {
    try {
      const enabled = await this.areNotificationsEnabled()
      const scheduled = await this.getScheduledNotifications()

      // Find daily reminder in scheduled notifications
      const dailyReminder = scheduled.find(
        (notification) => notification.identifier === 'daily-reminder'
      )

      let dailyReminderTime = null
      if (
        dailyReminder &&
        dailyReminder.trigger &&
        'type' in dailyReminder.trigger &&
        dailyReminder.trigger.type === 'daily'
      ) {
        const trigger = dailyReminder.trigger as any
        dailyReminderTime = {
          hour: trigger.hour,
          minute: trigger.minute,
        }
      }

      return {
        enabled,
        dailyReminderTime,
        scheduledCount: scheduled.length,
      }
    } catch (error) {
      console.error('Failed to get notification settings:', error)
      return {
        enabled: false,
        dailyReminderTime: null,
        scheduledCount: 0,
      }
    }
  }
}

// Export singleton instance
export const notificationService = NotificationService.getInstance()
